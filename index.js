const os = require('os');
const fs = require('fs');
const path = require('path');
const dir = require('node-dir');
const OSS = require('ali-oss');
const core = require('@actions/core');
const github = require('@actions/github');


const accessKeyId = process.env.OSS_ACCESS_KEY_ID;
const accessKeySecret = process.env.OSS_ACCESS_KEY_SECRET;

const sourceDir = core.getInput('source-dir');
const destDir = core.getInput('dest-dir');
//const excludePattern = core.getInput('exclude-pattern');
const bucket = core.getInput('bucket');
const region = core.getInput('region');
const endpoint = core.getInput('endpoint');

if (os.type() === 'Windows_NT') {
  core.setFailed('ÊöÇ‰∏çÊîØÊåÅÂú® Windows ÁéØÂ¢É‰∏≠ÊâßË°å ‚ùå');
  process.exit(1);
}

if (!accessKeyId) {
  core.setFailed('ÂøÖÈ°ªËÆæÁΩÆÁéØÂ¢ÉÂèòÈáè OSS_ACCESS_KEY_ID ‚ùå');
}

if (!accessKeySecret) {
  core.setFailed('ÂøÖÈ°ªËÆæÁΩÆÁéØÂ¢ÉÂèòÈáè OSS_ACCESS_KEY_SECRET ‚ùå');
}

if (!sourceDir) {
  core.setFailed('ËØ∑ÈÖçÁΩÆ source-dir ‚ùå');
}

if (!destDir) {
  core.setFailed('ËØ∑ÈÖçÁΩÆ dest-dir ‚ùå');
}

if (!bucket) {
  core.setFailed('ËØ∑ÈÖçÁΩÆ bucket ‚ùå');
}

if (!region) {
  core.setFailed('ËØ∑ÈÖçÁΩÆ region ‚ùå');
}

const ossOpt = {
  region,
  accessKeyId,
  accessKeySecret,
  bucket,
};

if (endpoint) {
  ossOpt.endpoint = endpoint;
}

const client = new OSS(ossOpt);

console.log(`==========> ÂΩìÂâç OSS Bucket: ${bucket}`);
console.log(`==========> ÂΩìÂâç OSS Region: ${region}`);
if (endpoint) {
  console.log(`==========> ÂΩìÂâç OSS Endpoint: ${endpoint}`);
}

const fileRelativePathRegExpPattern = `${sourceDir}/(.*)$`;

uploadToOss();

function uploadToOss() {

  dir.files(path.join(process.cwd(), sourceDir), (err, files) => {
    if (err) {
      if (err.code === 'ENOENT') {
        core.setFailed(`${sourceDir} ÁõÆÂΩï‰∏çÂ≠òÂú®`);
      } else {
        core.setFailed(`dir.files error: ${err}`);
      }
    }

    console.log(`==========> ÂºÄÂßã‰∏ä‰º†Êñá‰ª∂Âà∞ OSSÔºåÂÖ± ${files.length} ‰∏™Êñá‰ª∂`);

    const failFiles = [];

    Promise.all(
      files.map((filePath) => {
        return new Promise((resolve, reject) => {

          const uploadFileRelativePath = filePath.match(new RegExp(fileRelativePathRegExpPattern))[1];

          const key = `${destDir}/${uploadFileRelativePath}`;

          console.log(`ÂºÄÂßã‰∏ä‰º†Ôºö${filePath} --------> ${key}`);

          client.put(key, filePath).then(data => {
            console.log(`==========> ${key} ‰∏ä‰º†ÊàêÂäü~ üéâ`);
            resolve(data);
          }).catch(error => {
            console.log(`${key} ‰∏ä‰º†Â§±Ë¥•ÔºÅ‚ùå error: ${error}`);
            failFiles.push({
              key,
              filePath,
            });
            resolve({});
          });
        });
      }),
    ).then((result) => {
      if (!failFiles.length) {
        console.log(`----------> ÂÖ®ÈÉ®‰∏ä‰º†ÊàêÂäü~ üéâüéâüéâüéâüéâ`);
      } else {
        console.log(`----------> ÈÉ®ÂàÜ‰∏ä‰º†ÊàêÂäü~ ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏èÔºåÂ§±Ë¥• ${failFiles.length} ‰∏™`);

        for (const item of failFiles) {
          console.log(`ÂºÄÂßãÈáçÊñ∞‰∏ä‰º†Ôºö${item.filePath} --------> ${item.key}`);

          client.put(item.key, item.filePath).then(data => {
            console.log(`==========> ${item.key} ‰∏ä‰º†ÊàêÂäü~ üéâ`);
          }).catch(error2 => {
            core.setFailed(`${item.key} ÈáçÊñ∞‰∏ä‰º†Â§±Ë¥•ÔºÅ‚ùå error: ${error2}`);
          });
        }

      }
    });
  });
}
